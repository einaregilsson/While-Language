/*
 * While Compiler
 * http://code.google.com/p/while-language/
 *
 * Copyright (C) 2009 Einar Egilsson [einar@einaregilsson.com]
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *  
 * $HeadURL$
 * $LastChangedDate$
 * $Author$
 * $Revision$
 */
using While.AST;
using While.AST.Expressions;
using While.AST.Sequences;
using While.AST.Statements;
using System.Collections.Generic;

COMPILER Program
	


CHARACTERS
  letter = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz_".
  digit = "0123456789".
  cr  = '\r'.
  lf  = '\n'.
  tab = '\t'.

TOKENS
  ident  = letter {letter | digit}.
  number = digit {digit}.

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf
COMMENTS FROM "#" TO lf

IGNORE cr + lf + tab

PRODUCTIONS

Program<>
=                                          				(.	StatementSequence statements = null;
															ProcedureSequence procs = new ProcedureSequence(); 
															Token startTok = null, endTok = null; .)

   	(
    IF(IsProcProgram())
    	"begin"											 (.	startTok = t; .)
    	Proc<procs>
    	{
    		Proc<procs>
    	}

    	StmtSeq<out statements>
    	"end"											(.	endTok = t; .)
    |
    	StmtSeq<out statements>
    )
    
    													(.	WhileProgram.Instance = new WhileProgram(procs, statements);
															if (startTok != null && endTok != null) {
																WhileProgram.Instance.AddSequencePoint(startTok);
																WhileProgram.Instance.AddSequencePoint(endTok);
															}
														.)
.

Proc<ProcedureSequence procs>
=														(.	StatementSequence statements;
															string name;
															VariableSequence valArgs = new VariableSequence();
															Variable resultArg = null; .)
	"proc"												(.	Token ptok = t; .)
	ident												(.	name = t.val; .)
	"("
	[
		(
			"val"
			ident										(.	Variable v = new Variable(t.val);
															v.IsValueArg = true;
															valArgs.AddVariable(v);
															SymbolTable.DefineArgument(t.val); .)
			[Args<valArgs, out resultArg>]
		|
			"res"
			ident										(.	resultArg = new Variable(t.val);
															resultArg.IsResultArg = true;
															SymbolTable.DefineResultArgument(t.val); .)
		)
	]
	")"													(.	SequencePoint seq1 = new SequencePoint(ptok.line,ptok.col, t.line,t.col+t.val.Length); .)
	"is"
	StmtSeq<out statements>
	"end"												(.	SequencePoint seq2 = new SequencePoint(t.line, t.col, t.line, t.col+t.val.Length); .)
	";"													(.	if (procs.ContainsProcedure(name)) {
																errors.SemErr(ptok.line, ptok.col, "Procedure '" + name + "' is already declared");
															} else {
																Procedure proc = new Procedure(name, valArgs, resultArg, statements);
																proc.AddSequencePoint(seq1);
																proc.AddSequencePoint(seq2);
																procs.AddProcedure(proc);
															}
															SymbolTable.Clear();
														.)
.

Args<VariableSequence valArgs, out Variable resultArg> 
                                                            (. resultArg = null; .)
=
	(
	IF(IsStartOfResultArg()) 
	","
	"res" 
	ident									(.	resultArg = new Variable(t.val);
												resultArg.IsResultArg = true;
												if (SymbolTable.IsDeclaredInCurrentScope(t.val)) {
													errors.SemErr(t.line, t.col, string.Format("Argument '{0}' is already declared in this scope",t.val));
												} else {
													SymbolTable.DefineResultArgument(t.val);
												}
											.)
	|
	","
	ident									(.	Variable v = new Variable(t.val);
												v.IsValueArg = true;
												valArgs.AddVariable(v);
												if (SymbolTable.IsDeclaredInCurrentScope(t.val)) {
													errors.SemErr(t.line, t.col, string.Format("Argument '${0}' is already declared in this scope",t.val));
												} else {
													SymbolTable.DefineArgument(t.val);
												}
											.)
	[Args<valArgs, out resultArg>] 
	)
.

StmtSeq<out StatementSequence statements>
=													(. 	Statement stmt;
														statements = new StatementSequence();
													.)
    Stmt<out stmt>                         				(. statements.AddStatement(stmt); .)
    {
        ';' Stmt<out stmt>                 				(. statements.AddStatement(stmt); .)
    }
.

Stmt<out Statement stmt>
=													(. 	Expression exp = null;
                                                        stmt = null;
														int sl = la.line, sc = la.col;
														StatementSequence stmtSeq; 
														Token bf; .)

	( AssignStmt<out stmt>								(. stmt.AddSequencePoint(sl,sc, t.line,t.col+t.val.Length); .)
	| "skip"                               			(. stmt = new Skip();stmt.AddSequencePoint(t); .)
	| BlockStmt<out stmt>                       
	| IfStmt<out stmt>
	| WhileStmt<out stmt>
	| ReadStmt<out stmt>								(. 	stmt.AddSequencePoint(sl,sc, t.line,t.col+t.val.Length);.)
	| "write" Expr<out exp>                				(. 	stmt = new Write(exp); stmt.AddSequencePoint(sl,sc, t.line,t.col+t.val.Length); .)
	| CallProc<out stmt>								(. 	stmt.AddSequencePoint(sl,sc, t.line,t.col+t.val.Length); .)
	| 
		'(' 										(.	bf = t; .)
		StmtSeq<out stmtSeq> 
		')'											(.	stmt = stmtSeq;
														stmt.AddSequencePoint(bf);
														stmt.AddSequencePoint(t); .)
		
	)
.

ReadStmt<out Statement stmt>
=
                                                    (. stmt = null; .)
	"read" 
	(
		ident                         				(. 	stmt = new Read(new Variable(t.val)); .)
		|
		'(' 
		ident										(. 	stmt = new Read(new Variable(t.val)); .)
		')'
	)
.

VarDecStmt<out VariableDeclarationSequence vars>
=													(. vars = new VariableDeclarationSequence(); .)
	VarDec<vars>
	{
	    VarDec<vars>
	}
.

VarDec<VariableDeclarationSequence vars>
=
	"var" 											(. 
														int sl = t.line; 
														int sc = t.col;
														int el = la.line;
														int ec = la.col+la.val.Length; .)
	ident                             				(. 	if (SymbolTable.IsDeclaredInCurrentScope(t.val)) {
															errors.SemErr(t.line, t.col, string.Format("Variable '{0}' is already declared in this scope", t.val));
														} else if (SymbolTable.IsInScope(t.val)) {
															errors.Warning(t.line, t.col, string.Format("Variable '{0}' hides variable with same name in outer block",t.val));
															SymbolTable.DefineVariable(t.val);
														} else {
															SymbolTable.DefineVariable(t.val);
														}
														VariableDeclaration vd = new VariableDeclaration(new Variable(t.val));
														vd.AddSequencePoint(sl,sc,el,ec);
														vars.AddVariableDeclaration(vd); .)
	';'
.

BlockStmt<out Statement block>                 
=
	"begin"                                 		(.	if (Options.BookVersion) {
															errors.SemErr(t.line, t.col, "Variable declarations are only allowed when using the /coursesyntax switch. Type 'wc.exe /help' for more information");
															While.Environment.Exit(1);
														}
														VariableDeclarationSequence vars = new VariableDeclarationSequence();
														SymbolTable.PushScope();
														int sl = t.line;
														int sc = t.col;
														int el = t.line;
														int ec = t.col+t.val.Length;
														.)
	[ VarDecStmt<out vars> ]							(. StatementSequence statements; .)
	StmtSeq<out statements>                
	"end"                       					(. 	block = new Block(vars, statements);
														block.AddSequencePoint(sl,sc,el,ec);
														block.AddSequencePoint(t);
														SymbolTable.PopScope(); .)
.

AssignStmt<out Statement assign>            		(. 	Expression exp;
														Variable var; 
														assign = null; .)
=	ident                                  			(. 	var = new Variable(t.val);
														if (!SymbolTable.IsInScope(t.val) && !Options.BookVersion) {
															errors.SemErr(t.line, t.col, string.Format("Assignment to undeclared variable '{0}'",t.val));
														}
													.)
	":="											(. Token tok = t; .)
	Expr<out exp>                          				(.	if (!ExpectInt(exp, tok, true)) {
															return;
														} 
													.)
													(. assign = new Assign(var, (TypedExpression<int>)exp); .)
.

IfStmt<out Statement ifStmt>           			(. 	StatementSequence ifBranch = null; 
														StatementSequence elseBranch = null;
														Statement tmpStmt = null;
														Expression exp = null;
														ifStmt = null;
													.)
=
	"if"											(.  int sl = t.line; int sc = t.col; Token tok = t; .)
	Expr<out exp>										(.	if (!ExpectBool(exp, tok, true)) {
	                                                        return;
	                                                    } .)
	"then"											(. 	int el = t.line; int ec = t.col+t.val.Length; .)
	
	(
		IF(Options.BookVersion) 
			Stmt<out tmpStmt>							(.	ifBranch = ToStatementSequence(tmpStmt); .)
			[
			    "else"
				Stmt<out tmpStmt>						(.	elseBranch = ToStatementSequence(tmpStmt); .)	
			]
		|
			StmtSeq<out ifBranch>
			[
			    "else"
			    StmtSeq<out elseBranch>
			]
			"fi"									(.	ifBranch.AddSequencePoint(t);
														if (elseBranch != null) {
														    elseBranch.AddSequencePoint(t);
														} 
													.)

	)
		                                  			(. 	ifStmt = new If((TypedExpression<bool>)exp, ifBranch, elseBranch);
														ifStmt.AddSequencePoint(sl,sc,el,ec);
													.)
.

WhileStmt<out Statement whileStmt>          		(.	Expression exp = null;
														StatementSequence whileBranch = null;
														Statement branchStmt = null;
														whileStmt = null;
                                                    .)
=
	"while"											(. 	int sl = t.line; int sc = t.col; Token tok = t; .)
	Expr<out exp>										(. 	if (!ExpectBool(exp, tok, true)) { return; } .)
	"do"											(.	int el = t.line; int ec = t.col+t.val.Length; .)
	(
		IF(Options.BookVersion)
		Stmt<out branchStmt>							(.	whileBranch = ToStatementSequence(branchStmt); .)
	|
		StmtSeq<out whileBranch>
		"od"										(.	whileBranch.AddSequencePoint(t); .)
	)
		                                   			(. 	whileStmt = new While.AST.Statements.While((TypedExpression<bool>)exp, whileBranch);
														whileStmt.AddSequencePoint(sl,sc,el,ec);
													.)
.

CallProc<out Statement callStmt>
=													(.	Expression exp;
														List<Expression> expressions = new List<Expression>();	.)
	"call"											(.	Token callToken = t;
														Token exprToken = null;.)
	ident											(.	string proc = t.val; .)
	"("
	[
													(.	exprToken = la; .)
		Expr<out exp>									(.	expressions.Add(exp); ExpectIntArg(exp, exprToken); .)
		{ 
			"," 									(.	exprToken = la; .)
			Expr<out exp>								(.	expressions.Add(exp); ExpectIntArg(exp, exprToken); .)
		}
	]
	")"												(.	callStmt = new Call(proc, expressions, callToken, exprToken); .)
.


Expr<out Expression exp>
=	
    LogicOr<out exp>                      
.


LogicOr<out Expression exp>                	    (. Expression second; .)
=	
    LogicAnd<out exp>                      
    {
        "or"          							(. Token tok = t; .)
        LogicAnd<out second>						(.	if (!ExpectBool(exp, tok, false)) { return; } 
													if (!ExpectBool(second, tok, true)) { return; } 
													exp = new LogicalOr((TypedExpression<bool>)exp, (TypedExpression<bool>)second); .)
    }                                       
.

LogicAnd<out Expression exp>                	(. Expression second; .)                
=	
    LogicXor<out exp>
    {                            
        "and"                    				(. 	Token tok = t; .)
        LogicXor<out second>						(.	if (!ExpectBool(exp, tok, false)) { return; } 
													if (!ExpectBool(second, tok, true)) { return; } 
													exp = new LogicalAnd((TypedExpression<bool>) exp, (TypedExpression<bool>) second); .)
    }
.

LogicXor<out Expression exp>                	(. Expression second; .)                
=	
    Comparison<out exp>
    {                            
        "xor"                    				(. 	Token tok = t; .)
        Comparison<out second>						(.	if (!ExpectBool(exp, tok, false)) { return; } 
													if (!ExpectBool(second, tok, true)) { return; } 
													exp = new LogicalXor((TypedExpression<bool>)exp, (TypedExpression<bool>)second); .)
    }
.

Comparison<out Expression exp>           	(.	Expression second; .)
=
    BitOr<out exp>
    [
        ("<"|">"|"<="|">="|"=="|"!=")			(. 	Token tok = t; .)
        Comparison<out second>						(.	if (!ExpectInt(exp, tok, false)) { return; };
													if (!ExpectInt(second, tok, true)) { return; };
													if (tok.val == "<") {
													    exp = new LessThan((TypedExpression<int>)exp, (TypedExpression<int>)second);
													} else if (tok.val == ">") {
													    exp = new GreaterThan((TypedExpression<int>)exp, (TypedExpression<int>)second); 
													} else if (tok.val == "<=") {
													    exp = new LessThanOrEqual((TypedExpression<int>)exp, (TypedExpression<int>)second); 
													} else if (tok.val == ">=") {
													    exp = new GreaterThanOrEqual((TypedExpression<int>)exp, (TypedExpression<int>)second); 
													} else if (tok.val == "==") {
													    exp = new Equal((TypedExpression<int>)exp, (TypedExpression<int>)second); 
													} else if (tok.val == "!=") {
													    exp = new NotEqual((TypedExpression<int>)exp, (TypedExpression<int>)second); 
													}
													.)
    ]
.

BitOr<out Expression exp>                	(.	Expression second; .)                  
=	
    BitXor<out exp>
    {
        "|"       								(. 	Token tok = t; .)
        BitXor<out second>                 			(.	if (!ExpectInt(exp, tok, false)) { return; } 
													if (!ExpectInt(second, tok, true)) { return; } 
													exp = new BitwiseOr((TypedExpression<int>)exp, (TypedExpression<int>)second); .)
    }
.

BitXor<out Expression exp>                	(.	Expression second; .)                 
=	
    BitAnd<out exp>
    {
        "^"     								(. Token tok = t; .)
        BitAnd<out second>                 			(.	if (!ExpectInt(exp, tok, false)) { return; } 
													if (!ExpectInt(second, tok, true)) { return; } 
													exp = new BitwiseXor((TypedExpression<int>)exp, (TypedExpression<int>)second); .)
    }
.

BitAnd<out Expression exp>                	(.	Expression second; .)                 
=	
    BitShift<out exp>
    {
        "&"                             		(. 	Token tok = t; .)
        BitShift<out second>                  		(.	if (!ExpectInt(exp, tok, false)) { return; } 
													if (!ExpectInt(second, tok, true)) { return; } 
													exp = new BitwiseAnd((TypedExpression<int>)exp, (TypedExpression<int>)second); .)
    }
.

BitShift<out Expression exp>                	(.	Expression second; .)
=	
    PlusMinus<out exp>
    {
        ("<<"|">>")             							(. 	Token tok = t; .)
        PlusMinus<out second>              			(.	if (!ExpectInt(exp, tok, false)) { return; } 
													if (!ExpectInt(second, tok, true)) { return; } 
													if (tok.val == "<<") {
													    exp = new ShiftLeft((TypedExpression<int>)exp, (TypedExpression<int>)second);
													} else if (tok.val == ">>") {
													    exp = new ShiftRight((TypedExpression<int>)exp, (TypedExpression<int>)second);
													}
												.)
													
    }
.

PlusMinus<out Expression exp>                (. 	Expression second; .)
=	
    MulDivMod<out exp>
    {
        ("+"|"-")             					(. 	Token tok = t; .)
        MulDivMod<out second>              			(.	if (!ExpectInt(exp, tok, false)) { return; } 
													if (!ExpectInt(second, tok, true)) { return; } 
													if (tok.val == "+") {
													    exp = new Plus((TypedExpression<int>)exp, (TypedExpression<int>)second);
													} else if (tok.val == "-") {
													    exp = new Minus((TypedExpression<int>)exp, (TypedExpression<int>)second);
													}
													 .)
    }
.

MulDivMod<out Expression exp>                (. 	Expression second; .)
=	
    UnaryOperator<out exp>
    {
        ("*"|"/"|"%")             					(. 	Token tok = t; .)
        UnaryOperator<out second>              			(.	if (!ExpectInt(exp, tok, false)) { return; } 
													    if (!ExpectInt(second, tok, true)) { return; } 
													    if (tok.val == "*") {
													        exp = new Multiplication((TypedExpression<int>)exp, (TypedExpression<int>)second);
													    } else if (tok.val == "/") {
													        exp = new Division((TypedExpression<int>)exp, (TypedExpression<int>)second);
													    } else if (tok.val == "%") {
													        exp = new Modulo((TypedExpression<int>)exp, (TypedExpression<int>)second);
													    }
													 .)
    }
.

UnaryOperator<out Expression exp>               (. Token tok = null; string op = null; .)
=                               
	[
	'-'                                         (. tok = t; op = t.val; .)
	|
	'~'                                         (. tok = t; op = t.val; .)
	|
	"not"								        (. tok = t; op = t.val; .)
	]
	Terminal<out exp>                      			(.	if (op == "-") {
														if (!ExpectInt(exp, tok, true)) { return; }
														exp = new UnaryMinus((TypedExpression<int>)exp);
													} else if (op == "~") {
														if (!ExpectInt((TypedExpression<int>)exp, tok, true)) { return; }
														exp = new OnesComplement((TypedExpression<int>)exp);
													} else if (op == "not") {
														if (!ExpectBool(exp, tok, true)) { return; }
														exp = new Not((TypedExpression<bool>)exp);
													}
												.)
.

Terminal<out Expression exp>               
                                                (. exp = null; .)
=
	( ident                                		(. 	exp = new Variable(t.val);
													if (!SymbolTable.IsInScope(t.val) && !Options.BookVersion) {
														errors.SemErr(t.line, t.col, string.Format("Undeclared variable '{0}'", t.val)); 
													}
												.)
	| number                               		(. exp = new Number(int.Parse(t.val)); .)
	| "true"                               		(. exp = new Bool(true); .)
	| "false"                              		(. exp = new Bool(false); .)
	| '(' Expr<out exp> ')'
	)
.

END Program.
